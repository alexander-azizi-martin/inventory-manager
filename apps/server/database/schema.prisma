generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  userID           String        @db.Uuid
  productID        String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String        @db.VarChar(50)
  description      String?
  status           ProductStatus @default(DRAFT)
  price            Float         @default(0)
  cost             Float?
  vendorID         String        @db.Uuid
  productTypeID    String        @db.Uuid
  barcode          String?
  stockKeepingUnit String?
  quantity         Int           @default(0)
  createdAt        DateTime      @default(now()) @db.Timestamp(6)
  updatedAt        DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  productType      ProductTypes  @relation(fields: [productTypeID], references: [productTypeID], onDelete: Cascade, onUpdate: NoAction)
  user             Users         @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  vendor           Vendors       @relation(fields: [vendorID], references: [vendorID], onDelete: Cascade, onUpdate: NoAction)
  tags             Tags[]        @relation("ProductTags")
}

model Tags {
  userID      String @db.Uuid
  tagID       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tag         String @unique @db.VarChar(50)
  user        Users  @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  products Products[] @relation("ProductTags")
}

model Vendors {
  userID   String     @db.Uuid
  vendorID String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  vendor   String     @unique @db.VarChar(50)
  User     Users      @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  products Products[]
}

model ProductTypes {
  userID        String     @db.Uuid
  productTypeID String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  productType   String     @unique @db.VarChar(50)
  user          Users      @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
  products      Products[]
}

model Filters {
  userID      String         @db.Uuid
  filterID    String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String?        @db.VarChar(50)
  status      ProductStatus?
  productType String?        @db.VarChar(50)
  vendor      String?        @db.VarChar(50)
  tag         String?        @db.VarChar(50)
  user        Users          @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
}

model Sessions {
  userID       String   @db.Uuid
  refreshToken String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expiration   DateTime @default(dbgenerated("(now() + '1 year'::interval)")) @db.Timestamp(6)
  user         Users    @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: NoAction)
}

model Users {
  userID       String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username     String         @unique @db.VarChar(20)
  password     String         @db.Char(60)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  filters      Filters[]
  productTypes ProductTypes[]
  products     Products[]
  sessions     Sessions[]
  tags         Tags[]
  vendors      Vendors[]
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVE
}
